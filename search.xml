<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[【转载】前端常见正则表达式]]></title>
    <url>%2Fblog%2F2018%2F05%2F07%2F%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[前言 记录一下前端常用正则表达式，实际工作中要根据自己的项目提取合适的去使用 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171let regExp = &#123; // 数字正则 isNumber: function(str) &#123; let reg = /^-?\d*\.?\d+$/; if (reg.test(str)) &#123; return true &#125; else &#123; return false &#125; &#125;, // 正数正则 isPosNumber: function(str) &#123; let reg = /^\d*\.?\d+$/; if (reg.test(str)) &#123; return true &#125; else &#123; return false &#125; &#125;, // 负数正则 isNegNumber: function(str) &#123; let reg = /^-\d*\.?\d+$/; if (reg.test(str)) &#123; return true &#125; else &#123; return false &#125; &#125;, // 整数正则 isInteger: function(str) &#123; let reg = /^-?\d+$/; if (reg.test(str)) &#123; return true &#125; else &#123; return false &#125; &#125;, // 正整数正则 isPosInteger: function(str) &#123; let reg = /^\d+$/; if (reg.test(str)) &#123; return true &#125; else &#123; return false &#125; &#125;, // 负整数正则 isNegInteger: function(str) &#123; let reg = /^-\d+$/; if (reg.test(str)) &#123; return true &#125; else &#123; return false &#125; &#125;, // 用户名正则 isUserName: function(str) &#123; // 4到16位（字母，数字，下划线，减号） let reg = /^[a-zA-Z0-9_-]&#123;4,16&#125;$/; if (reg.test(str)) &#123; return true &#125; else &#123; return false &#125; &#125;, // 包含中文正则 isChinese: function(str) &#123; let reg = /[\u4E00-\u9FA5]/; if (reg.test(str)) &#123; return true &#125; else &#123; return false &#125; &#125;, // 密码正则 isPassword: function(str) &#123; // 以字母开头，长度在6~18之间，只能包含字母、数字和下划线 let reg = /^[a-zA-Z]\w&#123;5,17&#125;$/; if (reg.test(str)) &#123; return true &#125; else &#123; return false &#125; &#125;, // 邮箱正则 isEmail: function(str) &#123; let reg = /^([A-Za-z0-9_\-\.\u4e00-\u9fa5])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]&#123;2,8&#125;)$/; if (reg.test(str)) &#123; return true &#125; else &#123; return false &#125; &#125;, // 手机号正则 isPhone: function(str) &#123; // 移动号段：134 135 136 137 138 139 147 148 150 151 152 157 158 159 172 178 182 183 184 187 188 198 // 联通号段：130 131 132 145 146 155 156 166 171 175 176 185 186 // 电信号段：133 149 153 173 174 177 180 181 189 199 // 虚拟运营商：170 let reg = /^(13[0-9]|14[5-9]|15[012356789]|166|17[0-8]|18[0-9]|19[8-9])[0-9]&#123;8&#125;$/; if (reg.test(str)) &#123; return true &#125; else &#123; return false &#125; &#125;, // 固定电话正则 isTelephone: function(str) &#123; let reg = /^(\(\d&#123;3,4&#125;\)|\d&#123;3,4&#125;-|\s)?\d&#123;8&#125;$/; if (reg.test(str)) &#123; return true &#125; else &#123; return false &#125; &#125;, // 第二代身份证号正则 isIDCard: function(str) &#123; let reg = /^[1-9]\d&#123;5&#125;(18|19|20)\d&#123;2&#125;((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9Xx]$/; if (reg.test(str)) &#123; return true &#125; else &#123; return false &#125; &#125;, // QQ号正则 isQQNumber: function(str) &#123; let reg = /^[1-9][0-9]&#123;4,10&#125;$/; if (reg.test(str)) &#123; return true &#125; else &#123; return false &#125; &#125;, // 微信号正则 isWeChatNumber: function(str) &#123; // 6至20位，以字母开头，字母，数字，减号，下划线 let reg = /^[a-zA-Z]([-_a-zA-Z0-9]&#123;5,19&#125;)+$/; if (reg.test(str)) &#123; return true &#125; else &#123; return false &#125; &#125;, // 特殊字符正则 isSpeNumber: function(str) &#123; let reg = /[&quot;&apos;&lt;&gt;%;)(&amp;+]+-!！@#$~/; if (reg.test(str)) &#123; return true &#125; else &#123; return false &#125; &#125;, // IP地址正则 isIP: function(str) &#123; let reg = /^\d+\.\d+\.\d+\.\d+$/; if (reg.test(str)) &#123; return true &#125; else &#123; return false &#125; &#125;, // 邮政编码正则 isPostCode: function(str) &#123; let reg = /^[1-9]&#123;1&#125;(\d+)&#123;5&#125;$/; if (reg.test(str)) &#123; return true &#125; else &#123; return false &#125; &#125; &#125;; 附上我比较喜欢用的一个正则图形化网站，有兴趣的可以试试：正则图形化参考资料:如何判断用户浏览器以及一些前端常用的正则表单验证前端开发中的 正则表达式 及常用正则表达式大全]]></content>
  </entry>
  <entry>
    <title><![CDATA[【原创】你见过这样的console么？]]></title>
    <url>%2Fblog%2F2018%2F05%2F04%2F%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91%E4%BD%A0%E8%A7%81%E8%BF%87%E8%BF%99%E6%A0%B7%E7%9A%84console%E4%B9%88%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[前言 console是前端开发中常用的调试方法，但是你见过这种样式的console么？ &emsp;&emsp;比如这样的： 或者这样的： 又或者这样的： 这种带着css样式的console是不是看起来更好一点。其实实现方法很简单：格式如下：1console.log(&quot;%c需要输出的信息 &quot;, &quot;css 代码&quot;); 可以复制以下代码到控制台自己试一下：1console.log(&quot;%cHello World&quot;, &quot;font-size:30px;padding:10px;color: #fff;text-transform: uppercase;text-shadow:0 0 5px #fff,0 0 10px #fff, 0 0 15px #fff, 0 0 40px #ff00de, 0 0 70px #ff00de; &quot;); 当然，如果有足够的时间，可以加上上面这些效果，给console添一点乐趣，毕竟，有时候开发也是很无聊的。但是大部分时候，没有时间去搞这些花里胡哨的东西，在日常开发中，用的最多的就是console.log()，输出的信息多了，很容易看晕，毕竟，我就是经常干这种事情的人，emmm。。所以说如果能让自己输出的信息变得可读性高一点，岂不是很好。比如：可以用console.warn()输出警告信息：可以用console.error()输出错误信息：可以用console.info()输出多个对象信息：可以用console.table()将数据输出成表格： 开发的时候加上这些是不是能添点乐趣？最后再补上MDN文档]]></content>
  </entry>
  <entry>
    <title><![CDATA[【原创】hexo系列问题]]></title>
    <url>%2Fblog%2F2018%2F04%2F25%2F%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91hexo%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[前言 用hexo搞了个自己的博客，顺便记录一下自己踩过的坑 一、hexo系列问题之部署到github时会删掉README文件1、首先，先来看一下为什么部署之后会删掉README文件：&emsp;&emsp;在编辑完博客内容之后，我们会先执行命令hexo g来生成静态文件，此时会把source文件里的.md格式的文件渲染为html文件并放到public下面，接下来执行命令hexo d，会把public下面的所有文件提交到对应的XXX.github.io这个仓库；但是README.md并没有出现在public中，所以github会认为我们删掉了README文件 2、填坑&emsp;&emsp;1）我们在本地的source文件里新建一个README.md文件。&emsp;&emsp;2）修改Hexo根目录下的_config.yml文件，将skip_render参数的值设置为README.md 加上第二步这个设置，是为了告诉hexo的解析器，在渲染source文件里的md文件时，跳过README.md文件 二、hexo首页文章显示查看原文按钮&emsp;&emsp;在文章中添加如下格式：123这是摘要&lt;!-- more --&gt; 这是全文 需要注意的是，点击 《阅读全文》 之后，文章会自动定位到所在位置，想要修改成从头阅读需要修改_config.yml 文件：1scroll_to_more: false]]></content>
  </entry>
  <entry>
    <title><![CDATA[【原创】微信小程序开发遇到的问题]]></title>
    <url>%2Fblog%2F2018%2F04%2F24%2F%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[前言 最近在开发微信小程序，顺便记录一下自己踩过的坑 一、按钮样式的修改小程序默认按钮样式背景色是灰色，有边框，如图1，想要修改成背景色为绿色，无边框，如图2，于是做了如下修改：123&lt;!-- wxml文件 --&gt;&lt;button class=&quot;btn1&quot; type=&quot;default&quot;&gt; default &lt;/button&gt;&lt;button class=&quot;btn2&quot; type=&quot;default&quot;&gt; default &lt;/button&gt; 123456789101112/*wxss文件*/button.btn1&#123;width:200rpx;margin:50rpx auto;&#125;button.btn2&#123;width:200rpx;margin:50rpx auto;border:none;background:#00D6A6;color:#ffffff;&#125; 结果得到了图3的结果，发现边框并没有去掉 研究之后发现，按钮的默认边框是添加在button：after伪类上面，于是进行如下修改： 123button.btn2::after&#123; border:none;&#125; 这样就大功告成了 二、使用wx.getImageInfo时，在微信开发者工具中没有问题，但是真机调试时发现，既不走success的回调，也不走fail的回调，研究之后发现问题所在，需要把img的域名添加在downloadFile下才能调用三、bind事件绑定不会阻止冒泡事件向上冒泡，catch事件绑定可以阻止冒泡事件向上冒泡。四、小程序中只有用组件包起来的文字才能在手机上长按选中，不用这个组件包起来的文字不能被长按选中五、wxss中背景图片只能用绝对地址，或者用base64六、canvas不支持网络图片，获取头像图片地址，然后把图片下载到微信的临时目录或者本地。]]></content>
  </entry>
  <entry>
    <title><![CDATA[【原创】关于git操作]]></title>
    <url>%2Fblog%2F2017%2F10%2F20%2F%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91%E5%85%B3%E4%BA%8Egit%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[前言 在实际工作中总会有一些不常用的git命令，但是用的时候却又到处找手册，在这篇博文中，记录了一些我偶尔用的git命令，方便查找 一、误操作git pull之后如何撤销？1、git reflog命令查看历史变更记录2、git reset –hard HEAD@{n}，（n是要回退到的引用位置）回退。 二、git回滚1、git log 查看提交的日志，找到要回滚的commit编号，比如：e377f60e28c8b841582、git reset –hard e377f60e28c8b84158 回滚3、git push -f origin master 强制提交]]></content>
  </entry>
  <entry>
    <title><![CDATA[【原创】UC浏览器中不显示img图片]]></title>
    <url>%2Fblog%2F2017%2F09%2F27%2F%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91UC%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%B8%8D%E6%98%BE%E7%A4%BAimg%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[前言 本文主要介绍UC浏览器中不显示img的问题，主要关注的是解决问题的思路 &emsp;&emsp;前段时间做移动站项目，需求是要在首页加一个开屏广告，然后就写写写，一切弄好了，测试了一圈，发现没什么大问题，BUT，当我用UC浏览器打开之后，发现所有的img图片都不加载，我擦嘞，这是啥情况？？？没办法，只好吭哧吭哧调试，我把图片路径换成本地的，不行，换成cdn地址的，不行，这就尴尬了。。。从来没遇到过这种情况，明明图片地址是对的，在别的浏览器上也能显示，为什么UC就不行？&emsp;&emsp;由于在移动端UC浏览器，也不是很好调试，总之就是折腾了半天之后发现：我所有的img标签都有一个行内样式”display:none !important“，WHAT？！&emsp;&emsp;我没有给img加这个样式啊？为啥会出现这个情况？难道跟浏览器有关系？接着就比较了一下UC和其他能显示的浏览器有什么区别，最后发现，是因为我测试的手机UC浏览器比其他浏览器多设置了一个广告拦截，把广告拦截关闭之后图片就能显示了。&emsp;&emsp;但是实际中要求每一个来网站的用户都去关闭这个设置是一件非常shi的事情，所以还是得找到原因。尝试着改了一下图片名字，广告拦截打开也能显示了，比较了一下，最后发现是因为我为了区别各个功能模块之间的图片，在图片名称前都加了前缀，比如导航的图片就会添加nav-，这里定义是广告，我就添加了ad-，然后就被当做垃圾信息过滤掉了，找到问题的根源了，那就好解决了，先把图片名字换掉，上传cdn，结果还是不显示，然后又看到cdn上图片的文件夹叫guanggao，果断改掉，这样就可以了！]]></content>
  </entry>
  <entry>
    <title><![CDATA[【原创】前端开发过程中遇到的问题及解决方法]]></title>
    <url>%2Fblog%2F2017%2F09%2F25%2F%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[前言 记录一下工作中遇到的问题，并附上解决方案 1、ios中去除button的默认样式,也可以去掉input的双边框 解决办法：1234input[type=button]&#123; -webkit-appearance:none; outline:none&#125; 2、safari中input[type=”text”]不能输入解决办法：123*:not(input) &#123; -webkit-user-select: none;&#125; 3、多行文本超出隐藏解决办法：12345678.parent&#123; overflow:hidden; //超出的文本隐藏 text-overflow:ellipsis; //溢出用省略号显示 white-space:nowrap; //溢出不换行 display:-webkit-box; //将对象作为弹性伸缩盒子模型显示。 -webkit-box-orient:vertical; //从上到下垂直排列子元素（设置伸缩盒子的子元素排列方式） -webkit-line-clamp:2; //这个属性不是css的规范属性，需要组合上面两个属性，表示显示的行数。&#125; 4、form表单中的button如果是submit类型，会与回车事件冲突5、获取url参数12345function GetQueryString(name)&#123; var reg = new RegExp(&quot;(^|&amp;)&quot;+ name +&quot;=([^&amp;]*)(&amp;|$)&quot;); var r = window.location.search.substr(1).match(reg); if(r!=null)return unescape(r[2]); return null;&#125;;]]></content>
  </entry>
  <entry>
    <title><![CDATA[【原创】移动端浏览器隐私模式或者无痕模式会影响localStorage/sessionStorage使用]]></title>
    <url>%2Fblog%2F2017%2F08%2F29%2F%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8F%E8%A7%88%E5%99%A8%E9%9A%90%E7%A7%81%E6%A8%A1%E5%BC%8F%E6%88%96%E8%80%85%E6%97%A0%E7%97%95%E6%A8%A1%E5%BC%8F%E4%BC%9A%E5%BD%B1%E5%93%8DlocalStorage-sessionStorage%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[前言 有没有被某些浏览器的隐私模式搞懵过？隐私模式会导致各种各样的问题，比如常用的本地存储localStorage/sessionStorage &emsp;&emsp;新项目中有需求用到了sessionStorage，但是在一些手机里一遇到和sessionStorage相关的代码就不执行，这给我急的，然后调试了一下发现是手机开启了无痕模式浏览，影响了sessionStorage的使用。&emsp;&emsp;找到了问题的根源，那剩下的事情就是解决了：总结来说就是在移动使用sessionStorage或者localStorage时，首先要判断是否支持，或者说是否被禁用，如果支持（或者没有被禁用），那么可以直接使用，如果被禁用了，可能就要换一种方式了。&emsp;&emsp;判断方法如下：12345678function isStorageSupported() &#123; try &#123; window.sessionStorage.setItem(key, &apos;test&apos;); return true; &#125; catch (error) &#123; return false; &#125;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[【原创】js上传图片到七牛云存储]]></title>
    <url>%2Fblog%2F2017%2F08%2F29%2F%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91js%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8%2F</url>
    <content type="text"><![CDATA[前言 项目开发过程中遇到一个需求，运营人员需要上传图片到七牛云，最开始的做法是，后台对接七牛，然后出一个接口，前端调用接口，先将图片传到后台，然后后台再上传七牛云，用的过程中发现，图片小的情况下还好，图片一旦到了几十兆甚至几百兆的时候就很慢，前端上传图片到后台需要一定时间，后端上传到七牛又需要一段时间，很是麻烦，所以果断改成了前端直接上传七牛 &emsp;&emsp;直接上代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113&lt;!doctype html&gt;&lt;html lang=&quot;zh&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;js上传图片到七牛&lt;/title&gt; &lt;style&gt; #container&#123; width:200px; height:200px; border:1px solid #9d9d9d; border-radius: 6px; margin:50px auto; position: relative; overflow: hidden; &#125; .upload-progress&#123; width:100%; height:100%; position: absolute; top:0; left:0; background: rgba(0,0,0,0.5); z-index: 5; color:#fff; line-height: 200px; text-align: center; display: none; &#125; #uploadImage&#123; width:100%; height:100%; position: absolute; top:0; left:0; z-index: 2; text-align: center; line-height: 200px; cursor: pointer; &#125; #container img&#123; width:100%; position: absolute; top:0; left:0; z-index: 1; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;container&quot;&gt; &lt;div id=&quot;uploadImage&quot;&gt;选择文件&lt;/div&gt; &lt;div class=&quot;upload-progress&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;script src=&quot;/moxie.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/plupload.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/qiniu.js&quot;&gt;&lt;/script&gt;&lt;script&gt; var uploader = Qiniu.uploader(&#123; disable_statistics_report: false, // 禁止自动发送上传统计信息到七牛，默认允许发送 runtimes: &apos;html5,flash,html4&apos;, // 上传模式，依次退化 browse_button: &apos;uploadImage&apos;, // 上传选择的点选按钮，必需 container: &apos;container&apos;, // 上传区域DOM ID，默认是browser_button的父元素 max_file_size: &apos;100mb&apos;, // 最大文件体积限制 flash_swf_url: &apos;Moxie.swf&apos;, // 引入flash，相对路径 dragdrop: false, // 关闭可拖曳上传 chunk_size: &apos;4mb&apos;, // 分块上传时，每块的体积,如果遇到分辨率特别高的图片不能采用分片上传，此时该值应该设置为0 multi_selection: !(moxie.core.utils.Env.OS.toLowerCase() === &quot;ios&quot;), uptoken_url: &apos;XXX&apos;, // 在初始化时，uptoken，uptoken_url，uptoken_func三个参数中必须有一个被设置,uptoken是上传凭证，由其他程序生成;uptoken_url是提供了获取上传凭证的地址，如果需要定制获取uptoken的过程则可以设置uptoken_func;其优先级为uptoken &gt; uptoken_url &gt; uptoken_func domain: &apos;XXX&apos;, // bucket域名，下载资源时用到，必需 get_new_uptoken: true, // 设置上传文件的时候是否每次都重新获取新的uptoken auto_start: true, // 选择文件后自动上传，若关闭需要自己绑定事件触发上传 max_retries: 3, // 上传失败最大重试次数 save_key: true, resize: &#123; // 想限制上传图片尺寸，直接用resize这个属性 width: 300, height: 300 &#125;, init: &#123; &apos;FilesAdded&apos;: function(up, files) &#123; // 文件添加进队列后，处理相关的事情 plupload.each(files, function(file) &#123; console.log(file) &#125;); &#125;, &apos;BeforeUpload&apos;: function(up, file) &#123; // 每个文件上传前，处理相关的事情 console.log(&quot;开始上传之前&quot;); $(&quot;.upload-progress&quot;).show(); &#125;, &apos;UploadProgress&apos;: function(up, file) &#123; // 每个文件上传时，处理相关的事情 console.log(&quot;上传中&quot;); $(&quot;.upload-progress&quot;).html(&quot;上传进度:&quot;+file.percent + &quot;%&quot;); &#125;, &apos;FileUploaded&apos;: function(up, file, info) &#123; // 每个文件上传成功后，处理相关的事情 console.log(&quot;上传成功&quot;); $(&quot;.upload-progress&quot;).hide(); var img = new Image(); //创建一个Image对象，实现图片的预下载 img.src = &quot;http://qiniu.com/&quot;+res.key; $(&quot;#container&quot;).append(img); &#125;, &apos;Error&apos;: function(up, err, errTip) &#123; console.log(&quot;上传出错&quot;) &#125;, &apos;UploadComplete&apos;: function() &#123; //队列文件处理完毕后，处理相关的事情 &#125; &#125; &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 需要注意的是：1、这个uploader初始化的时候如果放在change事件中是不会执行的2、分块上传时，一些分辨率或者色彩密度较高的图片不支持切片3、点击选择文件之后函数不执行的原因可能有：1）browse_button和container的值写成了class，但是不支持class，需要改成id名；2）函数没有初始化；3）后台返回来的token字段不正确，如果是这个原因，可以尝试将token改为uptoken最后附上七牛官方的上传demo]]></content>
  </entry>
  <entry>
    <title><![CDATA[【原创】在mac上如何用safari调试ios手机的移动端页面]]></title>
    <url>%2Fblog%2F2017%2F08%2F28%2F%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91%E5%9C%A8mac%E4%B8%8A%E5%A6%82%E4%BD%95%E7%94%A8safari%E8%B0%83%E8%AF%95ios%E6%89%8B%E6%9C%BA%E7%9A%84%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B5%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[前言 移动端网页调试比较麻烦，在此记录一种方法，方便查找 第一步：打开iphone手机的开发者模式，流程是：【设置】-&gt;【Safari】-&gt;【高级】-&gt;开启【Web检查器】 ，如图1、图2 第二步：打开Mac上Safari的开发者模式，流程是【Safari】-&gt;【偏好设置】-&gt;【高级】-&gt;【在菜单栏中显示“开发”菜单】勾选 第三步：用数据线将iphone手机和mac连接起来，在电脑的safari中按照流程执行：【开发】-&gt;【手机名称】-&gt;【正在调试的网站】 最后，就可以按照调试pc端页面的思路来调试ios的页面了]]></content>
  </entry>
  <entry>
    <title><![CDATA[【原创】如何使用电脑上的谷歌浏览器来调试移动端页面]]></title>
    <url>%2Fblog%2F2017%2F08%2F28%2F%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E7%94%B5%E8%84%91%E4%B8%8A%E7%9A%84%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9D%A5%E8%B0%83%E8%AF%95%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B5%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[前言 参照文章解决问题的前提是手机和电脑上都需要安装谷歌浏览器 第一步：需要将自己的手机调成开发者模式，一般的安卓手机都是找到手机的版本号，然后连续点击7次左右，如图1所示： 第二步：打开手机的设置选项，找到开发者选项 第三步：将开发者选项和USB调试都打开 第四步：打开电脑上的谷歌浏览器，调出控制台，并点击图4和图5中箭头所指部分 第五步：在之后出现的页面中要保证右边setting部分的第一个选项：Discover USB devices是选中状态，如图6 第六步：用你数据链连接你的电脑和手机，手机就会弹出一个连接提示，如图7所示，点击允许即可 第七步：在电脑上打开谷歌浏览器并输入chrome://inspect/，同时在手机上打开谷歌浏览器，并输入要调试的网页，如百度，点击inspect就可以调试页面啦 最后就是inspect的页面啦]]></content>
  </entry>
  <entry>
    <title><![CDATA[【转载】在浏览器中输入网址到打开网页的过程]]></title>
    <url>%2Fblog%2F2017%2F04%2F13%2F%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E8%BE%93%E5%85%A5%E7%BD%91%E5%9D%80%E5%88%B0%E6%89%93%E5%BC%80%E7%BD%91%E9%A1%B5%E7%9A%84%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[前言 本文以chrome为例，介绍了在浏览器中输入网址到打开网页的过程，记录流程，并没有深究太多 以chrome为例一、域名解析：浏览器会将当前输入的URL发送至DNS服务器并获得域名对应的WEB服务器的ip地址，过程如下： 1、chrome搜索自身的DNS缓存（有没有以及有没有过期），查看chrome自身的缓存：chrome://net-internals/#dns2、chrome浏览器没有找到自身缓存或者缓存已经失效，就会搜索操作系统自身的DNS缓存（有没有以及有没有过期）3、操作系统自身的DNS缓存没有找到或者已经失效，chrome会读取本地的HOST文件4、本地HOST文件的缓存没有找到或者已经失效，chrome会发起一个DNS的一个系统调用，即chrome以系统的名义向本地宽带运营商的 dns 服务器发起一个域名解析的请求，过程如下：a、宽带运营商服务器查看本身缓存b、运营商服务器代替浏览器发起一个迭代DNS解析的请求，运营商服务器把结果返回操作系统内核同时缓存起来c、操作系统内核把结果返回浏览器d、最终，浏览器拿到了网址对应的IP地址 二、浏览器获得域名对应的IP地址后，发起HTTP“三次握手”，建立TCP/IP连接三、tcp/ip 连接建立起来后，浏览器就可以向服务器发送 HTTP 请求了，比如说使用 get 方式请求一个域名。四、服务器收到这个请求后，根据路径参数，再经过后端的一些处理，把结果返回给浏览器，这样我们就得到了该域名对应的整个页面的代码或者其他的数据。五、浏览器拿到代码后，经过解析、渲染等，我们就看到了这个页面。值得注意的是：第五步中页面中的每一个 css 、js、图片等静态资源都需要一个 HTTP 请求。都需要上面的步骤。]]></content>
  </entry>
</search>
